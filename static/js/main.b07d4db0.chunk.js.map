{"version":3,"sources":["Api/Api.ts","Redux/authReducer.ts","Redux/ChatReducer.ts","Components/Main/Chat.tsx","Redux/Store.ts","Selectors.ts","Components/Header/Header.tsx","validation.ts","Components/Main/Login.tsx","Components/Main/Registration.tsx","Components/Main/Main.tsx","MyApp.tsx","App.tsx","index.tsx"],"names":["instance","axios","create","baseURL","authMe","userData","post","then","data","initialState","login","isAuth","initApp","error","success","ISAUTH","INITAPP","ERROR","SUCCESS","actions","type","isInit","authThunk","dispatch","acTkn","localStorage","getItem","responseCode","finally","loginThunk","response","message","setItem","logoutThunk","RegistrationThunk","items","MESSAGES","socket","messages","rootReducer","combineReducers","auth","state","action","chat","store","createStore","applyMiddleware","thunk","getAuthReducer","getChatMessages","Header","useDispatch","useSelector","className","cn","onClick","to","Chat","emptyDIV","useRef","useState","updMessage","useEffect","io","on","console","log","current","scrollIntoView","map","me","user","ref","onSubmit","e","preventDefault","value","placeholder","onChange","currentTarget","length","emit","validationLoginLoginPage","validationPasswordLoginPage","Login","initialValues","password","values","errors","touched","isValidating","visible","placement","title","id","name","validate","Registration","repeatPassword","a","setTimeout","resetForm","registration","validation","Main","path","MyApp","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b07d4db0.chunk.js","sourcesContent":["import { valuesRegistation } from './../Components/Main/Main';\r\nimport axios from \"axios\";\r\n\r\ntype auth = {\r\n    responseCode: number\r\n    login: string\r\n}\r\ntype responseCode = {\r\n    responseCode: number\r\n    message:string\r\n}\r\n\r\nexport type loginType = {\r\n    login:string\r\n    password:string\r\n}\r\n\r\ntype responseCodeWithTolen = {\r\n    responseCode: number\r\n    message:string\r\n    acTkn:string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://chat-onlineyanky.herokuapp.com/',\r\n  });\r\n\r\nexport const authMe = (userData:any) => instance.post<auth>('auth/me', userData).then( data => data.data)\r\nexport const login = (data:loginType) => instance.post<responseCodeWithTolen>('auth/login', data).then( data => data.data)\r\nexport const logout = () => instance.delete<responseCode>('auth/logout').then( data => data.data)\r\nexport const registration = (data:valuesRegistation) => instance.post<responseCode>('/auth/registration', data).then( data => data.data)","import { valuesRegistation } from './../Components/Main/Main';\r\nimport { Dispatch } from \"redux\"\r\nimport { authMe, login, loginType, logout, registration } from \"../Api/Api\"\r\nimport { InferActions } from \"./Store\"\r\n\r\nconst initialState = {\r\n    login:'',\r\n    isAuth:false,\r\n    initApp:false,\r\n    error:'',\r\n    success:'',\r\n}\r\n\r\nconst ISAUTH = 'IS-AUTH'\r\n\r\nconst INITAPP = 'INIT-APP'\r\n\r\nconst ERROR = 'ERROR'\r\n\r\nconst SUCCESS = 'SUCCESS'\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport default  function authReducer (state:initialStateType=initialState, action:Actions):initialStateType {\r\n    switch (action.type){\r\n        case ISAUTH:\r\n            return{\r\n                ...state,\r\n                login:action.login,\r\n                isAuth:action.isAuth,\r\n                error:''\r\n            }\r\n        case INITAPP:\r\n            return{\r\n                ...state,\r\n                initApp:action.isInit\r\n            }    \r\n        case ERROR:\r\n            return{\r\n                ...state,\r\n                error:action.error,\r\n                success:''\r\n            }    \r\n        case SUCCESS:\r\n            return{\r\n                ...state,\r\n                success:action.success,\r\n                error:''\r\n            }    \r\n        default:\r\n        return state\r\n    }\r\n\r\n}\r\n\r\ntype Actions = InferActions<typeof actions>\r\n\r\nexport const actions = {\r\n    authAc:(login:string, isAuth:boolean)=>({type:ISAUTH, login, isAuth} as const),\r\n    initAppAc:(isInit:boolean)=>({type:INITAPP, isInit} as const),\r\n    errorAc:(error:string)=>({type:ERROR, error} as const),\r\n    successAc:(success:string)=>({type:SUCCESS, success} as const),\r\n}\r\n\r\n\r\nexport const authThunk = (dispatch:Dispatch<Actions>) => {\r\n    authMe({acTkn:localStorage.getItem('acTkn')})\r\n    .then(data=> data.responseCode === 1 && dispatch(actions.authAc(data.login, true)))\r\n    .finally(()=>dispatch(actions.initAppAc(true)))\r\n}\r\n\r\nexport const loginThunk = (userData:loginType) => (dispatch:Dispatch<Actions>) => {\r\n    login(userData)\r\n    .then(response=>{\r\n        response.responseCode === 0 ? dispatch(actions.errorAc(response.message)): \r\n        localStorage.setItem('acTkn', response.acTkn)\r\n        authMe({acTkn:localStorage.getItem('acTkn')})\r\n        .then(data=>{\r\n            data.responseCode === 1 && dispatch(actions.authAc(data.login, true))\r\n        } )\r\n    })\r\n    \r\n}\r\n\r\nexport const logoutThunk =(dispatch:Dispatch<Actions>) => {\r\n    \r\n        localStorage.setItem('acTkn','')\r\n        authMe({acTkn:localStorage.getItem('acTkn')})\r\n        .then(data=> data.responseCode === 0 && dispatch(actions.authAc(data.login, false)))\r\n    \r\n    \r\n}\r\n\r\nexport const RegistrationThunk =(userData:valuesRegistation)=>(dispatch:Dispatch<Actions>) => {\r\n    \r\n    registration(userData)\r\n    .then((data)=>{data.responseCode === 1 ? dispatch(actions.successAc(data.message)): dispatch(actions.errorAc(data.message))})\r\n    \r\n    \r\n}","import { Dispatch } from \"redux\"\r\nimport { authMe, login, loginType, logout } from \"../Api/Api\"\r\nimport { InferActions } from \"./Store\"\r\n\r\ntype user = {\r\n    message:string\r\n    user:string\r\n}\r\n\r\nconst initialState = {\r\n    items:[] as Array<user>\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst MESSAGES = 'GET-MESSAGES'\r\n\r\nexport default  function chatReducer (state:initialStateType=initialState, action:Actions):initialStateType {\r\n    switch (action.type){\r\n        case MESSAGES:\r\n            return{\r\n                ...state,\r\n                items:[...action.messages]\r\n            }\r\n        default:\r\n        return state\r\n    }\r\n\r\n}\r\n\r\ntype Actions = InferActions<typeof actions>\r\n\r\nexport const actions = {\r\n    messagesAc:(messages:Array<user>)=>({type:MESSAGES, messages} as const),\r\n}\r\n","import { useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { actions } from \"../../Redux/ChatReducer\";\r\nimport { getAuthReducer, getChatMessages } from \"../../Selectors\"\r\nimport cn from 'classnames'\r\n\r\nlet socket:Socket;\r\n\r\nconst Chat = ()=>{\r\n    const messageLength = 150\r\n    const emptyDIV = useRef<HTMLDivElement | null>(null)\r\n    const [message, updMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const messages = useSelector(getChatMessages)\r\n    useEffect(()=>{\r\n            socket = io(\"https://chat-onlineyanky.herokuapp.com\");\r\n            socket.on('messages', (data)=>{\r\n                console.log(data)\r\n                dispatch(actions.messagesAc(data))\r\n                emptyDIV.current?.scrollIntoView()\r\n        })\r\n    },[])\r\n\r\n    const auth = useSelector(getAuthReducer)\r\n\r\n    const SendMessage = ()=>{\r\n        if (message && message.length < messageLength) {\r\n            socket.emit('message', {message, acTkn:localStorage.getItem('acTkn')})\r\n            updMessage('')\r\n        }    \r\n    }\r\n\r\n    const updateMessage = (value:string) =>{\r\n        if (value.length < messageLength) {\r\n            updMessage(value)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"chat\">\r\n            <div className=\"chat_title\">Online chat</div>\r\n            <div className=\"chat_messages\">\r\n            {messages.map(message=><div>\r\n                <div className={cn(\"user\", {me:auth.login === message.user})}><span>{message.user}</span></div>\r\n                <div className={cn(\"message\", {me:auth.login === message.user})}><span>{message.message}</span></div>\r\n                </div>)}\r\n            <div ref={emptyDIV}></div>\r\n            </div>\r\n            <form onSubmit={(e)=>e.preventDefault()}>\r\n            <div className=\"chat_footer\">\r\n                <input value={message} placeholder='Текст сообщения' onChange={(e)=>updateMessage(e.currentTarget.value)}></input>\r\n                <button onClick={SendMessage}>Отправить</button>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport authReducer from './authReducer';\r\nimport chatReducer from './ChatReducer';\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    chat:chatReducer\r\n})\r\n\r\ntype reducer = typeof rootReducer\r\nexport type AppState = ReturnType<reducer>\r\n\r\ntype ActionTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActions<T extends {[key:string]:(...args:any[])=>any}> = ReturnType<ActionTypes<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store","import { AppState } from \"./Redux/Store\";\r\n\r\nexport const getAuthReducer = (state:AppState) => state.auth\r\n\r\nexport const getChatMessages = (state:AppState) => state.chat.items","import { Link } from 'react-router-dom'\r\nimport '../css/header.css'\r\nimport cn from 'classnames'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getAuthReducer } from '../../Selectors'\r\nimport { actions, logoutThunk } from '../../Redux/authReducer'\r\n\r\nconst Header = ()=>{\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const auth = useSelector(getAuthReducer)\r\n\r\n    return(\r\n        <header className={cn('header','clearfix')}>\r\n        {auth.isAuth ? <div className=\"logout\"><div>{auth.login}</div><div><button onClick={()=>dispatch(logoutThunk)}>Logout</button></div></div> :\r\n         <div className=\"autorization\">\r\n         <Link onClick={()=>dispatch(actions.errorAc(''))} to='login'><span >Sign in</span></Link>\r\n         <Link onClick={()=>dispatch(actions.errorAc(''))} to='registration'><span>Sign up</span></Link>\r\n          </div>\r\n        }\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","\r\n\r\nexport function validationLoginLoginPage(value:string) {\r\n    let error;\r\n    if (value.length > 40) {\r\n      error = 'Максимальная длина поля 40 символов';\r\n    }\r\n    if (value && value.length < 10) {\r\n      error = 'Минимальная длина поля 10 символов';\r\n    }\r\n    return error;\r\n  }\r\n\r\n  export function validationPasswordLoginPage(value:string) {\r\n    let error;\r\n    if (value.length > 40) {\r\n      error = 'Максимальная длина поля 40 символов';\r\n    }\r\n    if (value && value.length < 10) {\r\n      error = 'Минимальная длина поля 10 символов';\r\n    }\r\n    return error;\r\n  }","import Tooltip from \"antd/lib/tooltip\"\r\nimport { Field, Form, Formik } from \"formik\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { loginThunk } from \"../../Redux/authReducer\"\r\nimport { getAuthReducer } from \"../../Selectors\"\r\nimport { validationLoginLoginPage, validationPasswordLoginPage} from \"../../validation\"\r\nimport { valuesLogin } from \"./Main\"\r\nimport 'antd/dist/antd.css'\r\n\r\n\r\n\r\nconst Login = ()=>{\r\n\r\n    const login = (values:valuesLogin)=>{\r\n      dispatch(loginThunk(values))\r\n    }\r\n\r\n    const auth = useSelector(getAuthReducer)\r\n\r\n    const dispatch = useDispatch()\r\n    return(\r\n        <div className='auth'>\r\n          <div className='auth_title'>Sign in</div>\r\n          \r\n        <Formik initialValues={{login: '',password: ''}}\r\n        onSubmit={(values: valuesLogin) => {login(values)}}>\r\n        \r\n        {({ errors, touched, isValidating }) => (\r\n        <Form>\r\n           <Tooltip visible={errors.login && touched.login ? true : false}  placement=\"right\" title={ <span>{errors.login}</span>}><Field id=\"login\" name=\"login\" placeholder=\"login\" validate={validationLoginLoginPage}/></Tooltip>\r\n          <Tooltip visible={errors.password && touched.password ? true : false} placement=\"left\" title={<span>{errors.password}</span>}><Field id=\"password\" name=\"password\" placeholder=\"password\" validate={validationPasswordLoginPage}/></Tooltip>\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>)}\r\n      </Formik>\r\n      <div className=\"error\">{auth.error && <span>{auth.error}</span>}</div>\r\n     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import { Field, Form, Formik } from \"formik\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { RegistrationThunk } from \"../../Redux/authReducer\"\r\nimport { getAuthReducer } from \"../../Selectors\"\r\nimport { validationLoginLoginPage, validationPasswordLoginPage } from \"../../validation\"\r\nimport { valuesRegistation } from \"./Main\"\r\n\r\nconst Registration = ()=>{\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const auth = useSelector(getAuthReducer)\r\n    \r\n    const registration = (values:valuesRegistation, a:any)=>{\r\n      dispatch(RegistrationThunk(values))\r\n      if (auth.success){\r\n        setTimeout(() => {\r\n          a.resetForm()\r\n        }, 10);\r\n        \r\n      } \r\n    }\r\n\r\n    return(\r\n        <div className='auth'>\r\n        <div className='auth_title'>Sign up</div>\r\n        <Formik initialValues={{login: '',password: '',repeatPassword:''}}\r\n        onSubmit={(values: valuesRegistation, a: any) => {registration(values, a)}}>\r\n        <Form>\r\n          <Field id=\"login\" name=\"login\" placeholder=\"login\" validation={validationLoginLoginPage}/>\r\n\r\n          <Field id=\"password\" name=\"password\" placeholder=\"password\" validationPasswordLoginPage={validationPasswordLoginPage}/>\r\n\r\n          <Field id=\"repeatPassword\" name=\"repeatPassword\" placeholder=\"repeat password\" />\r\n\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>\r\n      </Formik>\r\n      {<div className=\"error\"><span>{auth.error}</span></div>} {<div className=\"success\"><span>{auth.success}</span></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration","import { Formik, Form, Field } from \"formik\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport '../css/main.css'\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authThunk, loginThunk, logoutThunk } from \"../../Redux/authReducer\";\r\nimport { getAuthReducer, getChatMessages } from \"../../Selectors\";\r\nimport { actions } from \"../../Redux/ChatReducer\";\r\nimport Chat from \"./Chat\";\r\nimport Login from \"./Login\";\r\nimport Registration from \"./Registration\";\r\n\r\nexport interface valuesLogin {\r\n    login:string\r\n    password:string\r\n}\r\n\r\nexport interface valuesRegistation extends valuesLogin  {\r\n    repeatPassword:string\r\n}\r\n    \r\n\r\n    const Main = ()=>{\r\n        \r\n    \r\n    const auth = useSelector(getAuthReducer)\r\n        \r\n        \r\n    return(\r\n        \r\n        <main>  \r\n            {auth.isAuth ? <Chat/> :\r\n         <Switch>\r\n             <Route path='/login'><Login/></Route>\r\n             <Route path='/registration'><Registration/></Route>\r\n         </Switch>\r\n         }\r\n        </main>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Main","import React, { useEffect } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Main from './Components/Main/Main';\nimport {BrowserRouter} from 'react-router-dom'\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport store from './Redux/Store';\nimport { getAuthReducer } from './Selectors';\nimport { authThunk } from './Redux/authReducer';\n\nfunction MyApp() {\n\n  const dispatch = useDispatch()\n        useEffect(()=>{    \n            dispatch(authThunk)\n        },[])\n\n  const auth = useSelector(getAuthReducer)\n \n  return (\n    <div>\n    {auth.initApp &&\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n    </div>\n    }\n    </div>\n  );\n}\n\n\n\n\nexport default MyApp;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\nimport { Provider } from 'react-redux';\nimport store from './Redux/Store';\nimport MyApp from './MyApp';\n\nfunction App() {\n\n \n  return (\n    <HashRouter>\n    <Provider store={store}>\n      <MyApp/>\n    </Provider>\n    </HashRouter>\n  );\n}\n\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}